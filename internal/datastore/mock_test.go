// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/izaakdale/service-ids/datastore (interfaces: DynamoAPI)
//
// Generated by this command:
//
//	mockgen -destination=mock_test.go -package=datastore_test github.com/izaakdale/service-ids/datastore DynamoAPI
//

// Package datastore_test is a generated GoMock package.
package datastore_test

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamoAPI is a mock of DynamoAPI interface.
type MockDynamoAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoAPIMockRecorder
}

// MockDynamoAPIMockRecorder is the mock recorder for MockDynamoAPI.
type MockDynamoAPIMockRecorder struct {
	mock *MockDynamoAPI
}

// NewMockDynamoAPI creates a new mock instance.
func NewMockDynamoAPI(ctrl *gomock.Controller) *MockDynamoAPI {
	mock := &MockDynamoAPI{ctrl: ctrl}
	mock.recorder = &MockDynamoAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoAPI) EXPECT() *MockDynamoAPIMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockDynamoAPI) GetItem(arg0 context.Context, arg1 *dynamodb.GetItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamoAPIMockRecorder) GetItem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamoAPI)(nil).GetItem), varargs...)
}

// PutItem mocks base method.
func (m *MockDynamoAPI) PutItem(arg0 context.Context, arg1 *dynamodb.PutItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamoAPIMockRecorder) PutItem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamoAPI)(nil).PutItem), varargs...)
}
